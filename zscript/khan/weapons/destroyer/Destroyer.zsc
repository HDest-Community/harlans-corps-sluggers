// ------------------------------------------------------------
// "Destroyer" Break-action 4ga & 7.76mm Combination Gun
// ------------------------------------------------------------

class HDDestroyer : HDWeapon{
    default{
        weapon.selectionorder 91;
        weapon.slotnumber 3;
        weapon.slotpriority 11;
        weapon.bobrangex 0.32;
		weapon.bobrangey 0.96;
		weapon.bobspeed 2.0;
        scale 0.6;
        inventory.pickupmessage "You got the Destroyer. Harlan Corps again...";
        hdweapon.barrelsize 30,2,2;
		hdweapon.refid "dtr";
		tag "Destroyer";
		obituary "%o was destroyed by %k";
    }

    override void PostBeginPlay()
    {
        weaponspecial = 1337; // [Ace] UaS sling compatibility.
        Super.PostBeginPlay();
    }

	action void A_FireMain(){
		let p=HDBulletActor.FireBullet(self,"HDB_4GS",speedfactor:1.2);
		A_StartSound("destroyer/shootmain",CHAN_WEAPON,CHANF_OVERLAP);
		distantnoise.make(p,"world/shotgunfar");
	}

	action void A_FireSide(){
		HDBulletActor.FireBullet(self,"HDB_776",speedfactor:1.2);
		A_StartSound("destroyer/shootside",CHAN_WEAPON,CHANF_OVERLAP);
	}

	override string,double getpickupsprite(){return "DTPS"..getpickupframe().."0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("4GS1A0",(-43,-10),sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HD4GSAmmo"),-42,-8,sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawimage("TEN7A0",(-60,-10),sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("SevenMilAmmo"),-59,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int loffs=-15;int rofs=-10;
		if(hdw.weaponstatus[0]&DESTF_DOUBLE){
			loffs=-14;rofs=-11;
			sb.drawimage("STBURAUT",(-23,-17),sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[DESTS_CHAMBER1]>1){
			sb.drawrect(-28,loffs,5,3);
			sb.drawrect(-22,loffs,2,3);
		}else if(hdw.weaponstatus[DESTS_CHAMBER1]>0){
			sb.drawrect(-22,loffs,2,3);
		}
		if(hdw.weaponstatus[DESTS_CHAMBER2]>1){
			sb.drawrect(-28,rofs,5,3);
			sb.drawrect(-22,rofs,2,3);
		}else if(hdw.weaponstatus[DESTS_CHAMBER2]>0){
			sb.drawrect(-22,rofs,2,3);
		}
		if(hdw.weaponstatus[DESTS_CHAMBER3]>1){
			sb.drawrect(-35,-15,2,2);
			sb.drawrect(-35,-12,2,5);
		}else if(hdw.weaponstatus[DESTS_CHAMBER3]>0){
			sb.drawrect(-35,-12,2,5);
		}
		if(hdw.weaponstatus[DESTS_CHAMBER4]>1){
			sb.drawrect(-15,-15,2,2);
			sb.drawrect(-15,-12,2,5);
		}else if(hdw.weaponstatus[DESTS_CHAMBER4]>0){
			sb.drawrect(-15,-12,2,5);
		}
		for(int i=hdw.weaponstatus[DESTS_SIDESADDLE];i>0;i--){
			sb.drawrect(-11-i*4,-5,2,4);
		}
			sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[DESTS_ZOOM]*0.1),
			(-38,-28),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
	}

	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Shoot main barrels (top first)\n"
		..WEPHELP_ALTFIRE.."  Shoot side barrels (left first)\n"
		..WEPHELP_RELOAD.."  Reload main barrels (side saddles first)\n"
		..WEPHELP_ALTRELOAD.."  Reload main barrels (pockets only)\n"
		..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Reload left barrel\n"
		..WEPHELP_USE.."+"..WEPHELP_ALTRELOAD.."  Reload right barrel\n"
		..WEPHELP_FIREMODE.."+" ..WEPHELP_FIRE.."  Hold to force double shot (main barrels)\n"
		..WEPHELP_FIREMODE.."+"..WEPHELP_RELOAD.."  Load side saddles\n"
		..WEPHELP_UNLOAD.."  Unload (main barrels)\n"
		..WEPHELP_USE.."+"..WEPHELP_UNLOAD.."  Unload left barrel\n"
		..WEPHELP_FIREMODE.."+"..WEPHELP_UNLOAD.."  Unload right barrel\n"
		;
	}

	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=Screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.1;
		bobb.y=clamp(bobb.y,-8,8);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"frntsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			scale:(1,1)
		);

		if(scopeview){
			int scaledyoffset=60;
			int scaledwidth=89;
			vector2 sclhalf=(0.5,0.5);
			double degree=0.1*hdw.weaponstatus[DESTS_ZOOM];
			double deg=1/degree;
			int cx,cy,cw,ch;
			[cx,cy,cw,ch]=screen.GetClipRect();
			sb.SetClipRect(-44+bob.x,16+bob.y,scaledwidth,scaledwidth,
				sb.DI_SCREEN_CENTER);
            sb.fill(color(255,0,0,0),
					bob.x-44,scaledyoffset+bob.y-44,
					88,88,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
				);

				texman.setcameratotexture(hpc,"HDXCAM_BOSS",degree);
				let cam     = texman.CheckForTexture("HDXCAM_BOSS",TexMan.Type_Any);
				let reticle = texman.CheckForTexture("bossret1",TexMan.Type_Any);

				vector2 frontoffs=(0,scaledyoffset)+bob*3;

				double camSize  = texman.GetSize(cam);
				sb.DrawCircle(cam, frontoffs, 0.125,usePixelRatio:true);

				let reticleScale = camSize / texman.GetSize(reticle);
				
					sb.DrawCircle(reticle, frontoffs, .5*reticleScale, bob*deg*5-bob, 1.6*deg);
					
				screen.SetClipRect(cx,cy,cw,ch);

			sb.drawimage(
				"libscope",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(1.24,1.24)
			);
			sb.drawstring(
				sb.mAmountFont,string.format("%.1f",degree),
				(6+bob.x,105+bob.y),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_RIGHT,
				Font.CR_BLACK
			);
        }
		// the scope display is in 10ths of an arcminute.
		// one dot = 6 arcminutes.
	}

	override double gunmass(){
		return 20+weaponstatus[DESTS_SIDESADDLE]*0.18;
	}

	override double weaponbulk(){
		return 280+weaponstatus[DESTS_SIDESADDLE]*ENC_4GSLOADED;
	}

    override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
    int handshells;
	action void EmptyHand(int amt=-1,bool careful=false){
		if(!amt)return;
		if(amt>0)invoker.handshells=amt;
		while(invoker.handshells>0){
			if(careful&&!A_JumpIfInventory("HD4GSAmmo",0,"null")){
				invoker.handshells--;
				HDF.Give(self,"HD4GSAmmo",1);
 			}else{
				invoker.handshells--;
				A_SpawnItemEx("HDFumbling4GS",
					cos(pitch)*5,1,height-7-sin(pitch)*5,
					cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
					cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
					-sin(pitch)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
	}

    action void A_UnloadSideSaddle(){
		int uamt=clamp(invoker.weaponstatus[DESTS_SIDESADDLE],0,2);
		if(!uamt)return;
		invoker.weaponstatus[DESTS_SIDESADDLE]-=uamt;
		int maxpocket=min(uamt,HDPickup.MaxGive(self,"HD4GSAmmo",ENC_4GS));
		if(maxpocket>0&&pressingunload()){
			A_SetTics(16);
			uamt-=maxpocket;
			A_GiveInventory("HD4GSAmmo",maxpocket);
		}
		A_StartSound("weapons/pocket",9);
		EmptyHand(uamt);
	}

    override void failedpickupunload(){
		int sss=weaponstatus[DESTS_SIDESADDLE];
		if(sss<1)return;
		A_StartSound("weapons/pocket",9);
		int dropamt=min(sss,4);
		A_DropItem("HD4GSAmmo",dropamt);
		weaponstatus[DESTS_SIDESADDLE]-=dropamt;
		setstatelabel("spawn");
	}

	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			owner.A_DropInventory("HD4GSAmmo",amt*4);
		}
	}

	override void ForceBasicAmmo(){
		owner.A_SetInventory("HD4GSAmmo",20);
	}

	clearscope string getpickupframe(){
		int ssh=weaponstatus[DESTS_SIDESADDLE];
		if(ssh>=6)return "A";
		if(ssh>=5)return "B";
		if(ssh>=4)return "C";
		if(ssh>=3)return "D";
		if(ssh>=2)return "E";
		if(ssh>=1)return "F";
		return "G";
	}

	transient bool releasedtrigger;
	states{
	select0:
		DSTS A 0 A_Overlay(2,"droop");
		goto select0big;
	deselect0:
		DSTS A 0;
		goto deselect0big;
	droop:
		TNT1 A 1{
			if(pitch<frandom(8,11)&&(!gunbraced())){
				A_MuzzleClimb(frandom(-0.06,0.06),
					frandom(0.05,clamp(1-pitch,
						hdplayerpawn(self)?0.06/hdplayerpawn(self).strength:0.06
					,0.12))
				);
			}
		}loop;
	fire:
	altfire:
	ready:
		DSTS A 1{
			if(!pressingfire()&&!pressingaltfire()){
				invoker.releasedtrigger = true;
			}

			if(PressingFireMode()){
				invoker.weaponstatus[0]|=DESTF_DOUBLE;
				if(pressingreload()&&invoker.weaponstatus[DESTS_SIDESADDLE]<6){
					invoker.weaponstatus[0]&=~DESTF_DOUBLE;
					setweaponstate("reloadss");
					return;
				}
				else if(pressingunload()){
					setweaponstate("unloadright");
					return;
				}
			}else invoker.weaponstatus[0]&=~DESTF_DOUBLE;

			if(PressingUse()){
				if(pressingreload()&&invoker.weaponstatus[DESTS_CHAMBER3]<2&&countinv("SevenMilAmmo")){
					setweaponstate("reloadleft");
					return;
				}
				else if(pressingaltreload()&&invoker.weaponstatus[DESTS_CHAMBER4]<2&&countinv("SevenMilAmmo")){
					setweaponstate("reloadright");
					return;
				}
				else if(pressingunload()){
					setweaponstate("unloadleft");
					return;
				}
			}
			
			if(pressingzoom()){
				A_ZoomAdjust(DESTS_ZOOM,12,40);
			}

			bool ch1=invoker.weaponstatus[DESTS_CHAMBER1]==2;
			bool ch2=invoker.weaponstatus[DESTS_CHAMBER2]==2;
			bool ch3=invoker.weaponstatus[DESTS_CHAMBER3]==2;
			bool ch4=invoker.weaponstatus[DESTS_CHAMBER4]==2;

			bool dbl=invoker.weaponstatus[0]&DESTF_DOUBLE;
			if(pressingfire()&&invoker.releasedtrigger){
				invoker.releasedtrigger = false;
				if (dbl&&ch1&&ch2){
					setweaponstate("shoottopbottom");
					return;
				}
				else if(dbl){
					if(ch1)setweaponstate("shoottop");
					if(ch2)setweaponstate("shootbottom");
					return;
				}
				else if(ch1){
					setweaponstate("shoottop");
					return;
				}
				else if(ch2){
					setweaponstate("shootbottom");
					return;
				}
			}

			if(pressingaltfire()&&invoker.releasedtrigger){
				invoker.releasedtrigger = false;
				if(ch3){
					setweaponstate("shootleft");
					return;
				}
				else if(ch4){
					setweaponstate("shootright");
					return;
				}
			}
			else A_WeaponReady((WRF_ALL|WRF_NOFIRE)&~WRF_ALLOWUSER2);
		}
		DSTS A 0 A_WeaponReady();
		goto readyend;
	shoottop:
		DSTS B 1 offset(0,50) bright{
			A_FireMain();
			A_Light2();
			HDFlashAlpha(-32);
			A_ZoomRecoil(0.8);
			invoker.weaponstatus[DESTS_CHAMBER1]=1;
			
			if(!binvulnerable && !gunbraced()){
				damagemobj(invoker,self,8,"bashing");
				A_ChangeVelocity(
					cos(pitch)*-frandom(1.5,3),0,sin(pitch)*frandom(1.5,3),
					CVF_RELATIVE
				);
			}
		
			A_ChangeVelocity(
				cos(pitch)*-frandom(0.5,1),0,sin(pitch)*frandom(0.5,1),
				CVF_RELATIVE
			);

			A_MuzzleClimb(-frandom(8, 12), -frandom(10, 15), -frandom(8, 12), -frandom(10, 15));
		}
		DSTS A 1 A_Light0();
		goto alert;
	shootbottom:
		DSTS C 1 offset(0,50) bright{
			A_FireMain();
			A_Light2();
			HDFlashAlpha(-32);
			A_ZoomRecoil(0.8);
			invoker.weaponstatus[DESTS_CHAMBER2]=1;

			if(!binvulnerable && !gunbraced()){
				damagemobj(invoker,self,8,"bashing");
				A_ChangeVelocity(
					cos(pitch)*-frandom(1.5,3),0,sin(pitch)*frandom(1.5,3),
					CVF_RELATIVE
				);
			}
		
			A_ChangeVelocity(
				cos(pitch)*-frandom(0.5,1),0,sin(pitch)*frandom(0.5,1),
				CVF_RELATIVE
			);

			A_MuzzleClimb(-frandom(8, 12), -frandom(10, 15), -frandom(8, 12), -frandom(10, 15));
		}
		DSTS A 1 A_Light0();
		goto alert;
	shoottopbottom:
		DSTS D 1 offset(0,75) bright{
			A_FireMain();
			A_FireMain();
			A_Light2();
			HDFlashAlpha(-16);
			A_ZoomRecoil(0.6);
			invoker.weaponstatus[DESTS_CHAMBER1]=1;
			invoker.weaponstatus[DESTS_CHAMBER2]=1;

			if(!binvulnerable && !gunbraced()){
				damagemobj(invoker,self,16,"bashing");
				A_ChangeVelocity(
					cos(pitch)*-frandom(3,6),0,sin(pitch)*frandom(3,6),
					CVF_RELATIVE
				);
				HDPlayerPawn(self).A_Incapacitated(HDPlayerPawn.HDINCAP_SCREAM,150);
			}
		
			A_ChangeVelocity(
				cos(pitch)*-frandom(1,2),0,sin(pitch)*frandom(1,2),
				CVF_RELATIVE
			);

			A_MuzzleClimb(-frandom(16, 24), -frandom(20, 30), -frandom(16, 24), -frandom(20, 30));
		}
		DSTS A 1 A_Light0();
		goto alert;
	shootleft:
		DSTS E 1 bright{
			A_FireSide();
			A_Light1();
			HDFlashAlpha(-64);
			A_ZoomRecoil(0.95);
			invoker.weaponstatus[DESTS_CHAMBER3]=1;
			A_MuzzleClimb(frandom(0.2, 0.4), -frandom(0.25, 0.45), frandom(0.2, 0.4), -frandom(0.25, 0.45));
		}
		DSTS A 1 A_Light0();
		goto alert;
	shootright:
		DSTS F 1 bright{
			A_FireSide();
			A_Light1();
			HDFlashAlpha(-64);
			A_ZoomRecoil(0.95);
			invoker.weaponstatus[DESTS_CHAMBER4]=1;
			A_MuzzleClimb(-frandom(0.2, 0.4), -frandom(0.25, 0.45), -frandom(0.2, 0.4), -frandom(0.25, 0.45));
		}
		DSTS A 1 A_Light0();
		goto alert;
	alert:
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 setweaponstate("ready");
		stop;
	altreload:
		DSTS A 0{
			if(
				countinv("HD4GSAmmo")
				&&(
					invoker.weaponstatus[DESTS_CHAMBER1]<2
					||invoker.weaponstatus[DESTS_CHAMBER2]<2
				)
			){
				invoker.weaponstatus[0]|=DESTF_FROMPOCKETS;
				invoker.weaponstatus[0]&=~DESTF_UNLOADONLY;
			}
			else setweaponstate("nope");
		}goto reloadstart;
	reload:
		DSTS A 0{
			if(
				invoker.weaponstatus[DESTS_CHAMBER1]>1&&
				invoker.weaponstatus[DESTS_CHAMBER2]>1
			)setweaponstate("reloadss");

			invoker.weaponstatus[0]&=~DESTF_UNLOADONLY;
			if(invoker.weaponstatus[DESTS_SIDESADDLE]>0)
				invoker.weaponstatus[0]&=~DESTF_FROMPOCKETS;
			else if(countinv("HD4GSAmmo"))
				invoker.weaponstatus[0]|=DESTF_FROMPOCKETS;
			else setweaponstate("nope");
		}goto reloadstart;
	reloadstart:
	unloadstart:
		DSTS A 2 offset(0,34) EmptyHand();
		DSTS A 1 offset(0,40);
		DSTS A 3 offset(0,46);
		DSTS A 5 offset(0,47) A_StartSound("destroyer/openmain",8);
		DSTS A 4 offset(0,46) A_MuzzleClimb(
			frandom(0.6,1.2),frandom(0.6,1.2),
			frandom(0.6,1.2),frandom(0.6,1.2),
			frandom(1.2,2.4),frandom(1.2,2.4)
		);
		DSTS G 3 offset(0,32){
			//eject whatever is already loaded
			for(int i=0;i<2;i++){
				int chm=invoker.weaponstatus[DESTS_CHAMBER1+i];
				invoker.weaponstatus[DESTS_CHAMBER1+i]=0;
				if(chm>1){
					if(health<90&&countinv("IsMoving"))A_SpawnItemEx("HDFumbling4GS",
						cos(pitch)*5,-1,height-7-sin(pitch)*5,
						cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
						cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
						-sin(pitch-45)*random(1,4)+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);else A_SpawnItemEx("HDUnspent4GS",
						cos(pitch)*5,0,height-7-sin(pitch)*5,
						vel.x,vel.y,vel.z+1,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else if(chm==1)A_SpawnItemEx("HDSpent4GS",
					cos(pitch)*5,0,height-7-sin(pitch)*5,
					cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
					cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
					-sin(pitch-45)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
		DSTS G 2 offset(1,32);
		DSTS G 2 offset(2,32);
		DSTS G 2 offset(4,32);
		DSTS G 8 offset(0,34){
			if(invoker.weaponstatus[0]&DESTF_UNLOADONLY){
				setweaponstate("unloadend");
				return;
			}

			//play animation to search pockets as appropriate
			if(invoker.weaponstatus[0]&DESTF_FROMPOCKETS)
				A_StartSound("weapons/pocket",9);
				else setweaponstate("reloadtopnopocket");
		}
		DSTS G 4 offset(2,33);
		DSTS G 4 offset(0,33);
		DSTS G 4 offset(0,32);
	reloadtopnopocket:
		DSTS G 5 offset(1,0);
		DSTS G 2 offset(0,0);
		DSTS H 2 offset(0,32){
			//take 1 shell
			int ssh=0;
			if(invoker.weaponstatus[0]&DESTF_FROMPOCKETS){
				ssh=min(1,countinv("HD4GSAmmo"));
				if(ssh>0)A_TakeInventory("HD4GSAmmo",ssh);
			}else{
				ssh=min(1,invoker.weaponstatus[DESTS_SIDESADDLE]);
				invoker.weaponstatus[DESTS_SIDESADDLE]-=ssh;
			}

			//if the above leaves you with nothing, abort
			if(ssh<1){
				A_SetTics(0);
				return;
			}

			//transfer from hand to chambers
			ssh--;
			while(ssh>=0){
				invoker.weaponstatus[DESTS_CHAMBER1]=2;
				ssh--;
			}

			A_StartSound("destroyer/insertmain",8);
		}
		DSTS H 1 offset(1,33);
		DSTS H 2 offset(2,34);
		DSTS H 1 offset(1,33);
		DSTS H 2 offset(0,32){
			if(countinv("HD4GSAmmo")||invoker.weaponstatus[DESTS_SIDESADDLE]>0){
				setweaponstate("reloadbottompocket");
				return;
			}
		}
		goto reloadend;
	reloadbottompocket:
		DSTS I 5 offset(1,0);
		DSTS I 2 offset(0,0){
			if((invoker.weaponstatus[0]&DESTF_FROMPOCKETS)&&countinv("HD4GSAmmo")>0){
				return;
			}else if(invoker.weaponstatus[DESTS_SIDESADDLE]>0){
				setweaponstate("reloadbottomnopocket");
				return;
			}else{
				return;
			}
		}
		DSTS I 8 offset(0,34) A_StartSound("weapons/pocket",9);
		DSTS I 4 offset(2,33);
		DSTS I 4 offset(0,33);
		DSTS I 4 offset(0,32);
	reloadbottomnopocket:
		DSTS J 2 offset(0,32){
			if((invoker.weaponstatus[0]&DESTF_FROMPOCKETS)&&countinv("HD4GSAmmo")>0){
				A_TakeInventory("HD4GSAmmo",1);
			}else if(invoker.weaponstatus[DESTS_SIDESADDLE]>0){
				invoker.weaponstatus[DESTS_SIDESADDLE]-=1;
			}else{
				A_TakeInventory("HD4GSAmmo",1);
			}
			invoker.weaponstatus[DESTS_CHAMBER2]=2;
			A_StartSound("destroyer/insertmain",8);
		}
		DSTS J 1 offset(1,33);
		DSTS J 2 offset(2,34);
		DSTS J 1 offset(1,33);
		DSTS J 2 offset(0,32);
		goto reloadend;
	reloadend:
		DSTS # 2 offset(0,40);
		DSTS # 1 offset(0,46);
		DSTS # 2 offset(0,54);
		TNT1 A 8;
		DSTS A 2 offset(0,46);
		DSTS A 1 offset(0,42);
		DSTS A 2 offset(0,42) A_StartSound("destroyer/closemain",8);
		DSTS A 1;
		goto ready;
	unloadend:
		DSTS G 5;
		DSTS A 2 offset(0,46);
		DSTS A 1 offset(0,42);
		DSTS A 2 offset(0,42) A_StartSound("destroyer/closemain",8);
		DSTS A 1;
		goto nope;
	reloadss:
		DSTS A 0 A_JumpIf(invoker.weaponstatus[DESTS_SIDESADDLE]>=6,"nope");
		DSTS A 1 offset(1,34);
		DSTS A 2 offset(2,34);
		DSTS A 3 offset(3,36);
	reloadssrestart:
		DSTS A 6 offset(3,35);
		DSTS A 9 offset(4,34) A_StartSound("weapons/pocket",9);
	reloadssloop1:
		DSTS A 0{
			if(invoker.weaponstatus[DESTS_SIDESADDLE]>=6)setweaponstate("reloadssend");

			//load shells into hand
			int ssh=min(2,countinv("HD4GSAmmo"));
			if(ssh<1){
				setweaponstate("reloadssend");
				return;
			}
			ssh=min(2,ssh,max(1,health/20),12-invoker.weaponstatus[DESTS_SIDESADDLE]);
			invoker.weaponstatus[DESTS_SIDESADDLE]+=ssh;
			A_TakeInventory("HD4GSAmmo",ssh,TIF_NOTAKEINFINITE);
		}
	reloadssend:
		DSTS A 4 offset(3,34);
		DSTS A 0{
			if(
				invoker.weaponstatus[DESTS_SIDESADDLE]<6
				&&(pressingreload()||pressingaltreload())
				&&countinv("HD4GSAmmo")
			)setweaponstate("reloadssrestart");
		}
		DSTS A 3 offset(2,34);
		DSTS A 1 offset(1,34) emptyhand(careful:true);
		goto nope;
	unloadss:
		DSTS A 0 EmptyHand();
		DSTS A 2 offset(2,34) A_JumpIf(invoker.weaponstatus[DESTS_SIDESADDLE]<1,"nope");
		DSTS A 1 offset(3,36);
	unloadssloop1:
		DSTS A 4 offset(4,36);
		DSTS A 2 offset(5,37) A_UnloadSideSaddle();
		DSTS A 3 offset(4,36){	//decide whether to loop
			if(
				invoker.weaponstatus[DESTS_SIDESADDLE]>0
				&&!pressingfire()
				&&!pressingaltfire()
				&&!pressingreload()
			)setweaponstate("unloadssloop1");
		}
		DSTS A 3 offset(4,35);
		DSTS A 2 offset(3,35);
		DSTS A 1 offset(2,34);
		goto nope;
	unload:
		DSTS A 2 offset(0,34){
			if(invoker.weaponstatus[DESTS_SIDESADDLE]>0)setweaponstate("unloadss");
			else invoker.weaponstatus[0]|=DESTF_UNLOADONLY;
		}goto unloadstart;
	reloadleft:
		DSTS A 2 offset(0,34);
		DSTS A 1 offset(4,46);
		DSTS A 2 offset(8,59){
			A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
			if(invoker.weaponstatus[DESTS_CHAMBER3]==1){
				A_SpawnItemEx("HDSpent7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.weaponstatus[DESTS_CHAMBER3]=0;
			}
			else if(invoker.weaponstatus[DESTS_CHAMBER3]<1){
				return;
			}
		}
		DSTS A 11 offset(10,74) A_StartSound("weapons/pocket",CHAN_WEAPON,CHANF_OVERLAP);
		DSTS A 2 offset(11,73){
			if(!countinv("SevenMilAmmo"))return;
			A_TakeInventory("SevenMilAmmo",1,TIF_NOTAKEINFINITE);
			invoker.weaponstatus[DESTS_CHAMBER3]=2;
			A_StartSound("destroyer/insertside",CHAN_WEAPON,CHANF_OVERLAP);
		}
		DSTS A 1 offset(10,72);
		DSTS A 18 offset(10,74);
		DSTS A 2 offset(8,59) A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
		DSTS A 1 offset(4,46);
		DSTS A 2 offset(0,34);
		goto ready;
	reloadright:
		DSTS A 2 offset(0,34);
		DSTS A 1 offset(-4,46);
		DSTS A 2 offset(-8,59){
			A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
			if(invoker.weaponstatus[DESTS_CHAMBER4]==1){
				A_SpawnItemEx("HDSpent7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.weaponstatus[DESTS_CHAMBER4]=0;
			}
			else if(invoker.weaponstatus[DESTS_CHAMBER4]<1){
				return;
			}
		}
		DSTS A 11 offset(-10,74) A_StartSound("weapons/pocket",CHAN_WEAPON,CHANF_OVERLAP);
		DSTS A 2 offset(-11,73){
			if(!countinv("SevenMilAmmo"))return;
			A_TakeInventory("SevenMilAmmo",1,TIF_NOTAKEINFINITE);
			invoker.weaponstatus[DESTS_CHAMBER4]=2;
			A_StartSound("destroyer/insertside",CHAN_WEAPON,CHANF_OVERLAP);
		}
		DSTS A 1 offset(-10,72);
		DSTS A 18 offset(-10,74);
		DSTS A 2 offset(-8,59) A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
		DSTS A 1 offset(-4,46);
		DSTS A 2 offset(0,34);
		goto ready;
	unloadleft:
		DSTS A 2 offset(0,34);
		DSTS A 1 offset(4,46);
		DSTS A 2 offset(8,59){
			A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
			if(!pressingunload()){
				if(invoker.weaponstatus[DESTS_CHAMBER3]>1){
					A_SpawnItemEx("HDLoose7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				}
				else if(invoker.weaponstatus[DESTS_CHAMBER3]==1){
					A_SpawnItemEx("HDSpent7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				}
				else{
					return;
				}
			}
			else{
				if(invoker.weaponstatus[DESTS_CHAMBER3]>1){
					A_StartSound("weapons/pocket",CHAN_WEAPON,CHANF_OVERLAP);
					A_GiveInventory("SevenMilAmmo",1);
				}
				else if(invoker.weaponstatus[DESTS_CHAMBER3]==1){
					A_SpawnItemEx("HDSpent7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				}
				else{
					return;
				}
			}
			invoker.weaponstatus[DESTS_CHAMBER3]=0;
		}
		DSTS A 10 offset(10,74);
		DSTS A 2 offset(8,59) A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
		DSTS A 1 offset(4,46);
		DSTS A 2 offset(0,34);
		goto nope;
	unloadright:
		DSTS A 2 offset(0,34);
		DSTS A 1 offset(-4,46);
		DSTS A 2 offset(-8,59){
			A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
			if(!pressingunload()){
				if(invoker.weaponstatus[DESTS_CHAMBER4]>1){
					A_SpawnItemEx("HDLoose7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				}
				else if(invoker.weaponstatus[DESTS_CHAMBER4]==1){
					A_SpawnItemEx("HDSpent7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				}
				else{
					return;
				}
			}
			else{
				if(invoker.weaponstatus[DESTS_CHAMBER4]>1){
					A_StartSound("weapons/pocket",CHAN_WEAPON,CHANF_OVERLAP);
					A_GiveInventory("SevenMilAmmo",1);
				}
				else if(invoker.weaponstatus[DESTS_CHAMBER4]==1){
					A_SpawnItemEx("HDSpent7mm",
					cos(pitch)*10,0,height-10-10*sin(pitch),vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				}
				else{
					return;
				}
			}
			invoker.weaponstatus[DESTS_CHAMBER4]=0;
		}
		DSTS A 10 offset(-10,74);
		DSTS A 2 offset(-8,59) A_StartSound("destroyer/openside",CHAN_WEAPON,CHANF_OVERLAP);
		DSTS A 1 offset(-4,46);
		DSTS A 2 offset(0,34);
		goto nope;
	spawn:
		DTPS ABCDEFG -1 nodelay{
			int ssh=invoker.weaponstatus[DESTS_SIDESADDLE];
			if(ssh>=6)frame=0;
			else if(ssh>=5)frame=1;
			else if(ssh>=4)frame=2;
			else if(ssh>=3)frame=3;
			else if(ssh>=2)frame=4;
			else if(ssh>=1)frame=5;
			else frame=6;
		}
	}

    override void InitializeWepStats(bool idfa){
		weaponstatus[DESTS_CHAMBER1]=2;
		weaponstatus[DESTS_CHAMBER2]=2;
        weaponstatus[DESTS_CHAMBER3]=2;
		weaponstatus[DESTS_CHAMBER4]=2;
		weaponstatus[DESTS_SIDESADDLE]=6;
		handshells=0;
		if(!owner){
			weaponstatus[DESTS_ZOOM]=20;
		}
	}

	override void loadoutconfigure(string input){
		int zoom=getloadoutvar(input,"zoom",3);
		if(zoom>0)weaponstatus[DESTS_ZOOM]=
			clamp(zoom,12,40);
	}
}

enum destroyerstatus{
	DESTF_UNLOADONLY=1,
	DESTF_DOUBLE=2,
	DESTF_FROMPOCKETS=4,

	DESTS_CHAMBER1=1,
	DESTS_CHAMBER2=2,
    DESTS_CHAMBER3=3,
	DESTS_CHAMBER4=4,
    DESTS_SIDESADDLE=5,
	DESTS_ZOOM=6,
};

class DestroyerSpawn:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			let zzz=HDDestroyer(spawn("HDDestroyer",pos,ALLOW_REPLACE));
				spawn("HD7mClip",pos+(2,0,0),ALLOW_REPLACE);
				spawn("HD7mClip",pos+(-2,0,0),ALLOW_REPLACE);
				spawn("HD7mClip",pos+(4,0,0),ALLOW_REPLACE);
				spawn("HD7mClip",pos+(-4,0,0),ALLOW_REPLACE);
		}stop;
	}
}