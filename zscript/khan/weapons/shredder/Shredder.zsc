// ------------------------------------------------------------
// "Shredder" 4ga & 7.76mm Autocannon
// ------------------------------------------------------------

const HDLD_SHREDDER="sdr";

const HDLD_SHREDDERBOX="sdb";
const ENC_SHREDDERBOX_EMPTY=11;

class HDShredder:HDWeapon{
    default{
        //$Category "Weapons/Hideous Destructor"
		//$Title "Shredder"
		//$Sprite "SDPSA0"

        -hdweapon.fitsinbackpack
		+hdweapon.hinderlegs
        weapon.slotnumber 7;
		weapon.slotpriority 3;
		weapon.selectionorder 30;
		inventory.pickupmessage "You got the Shredder! It's very heavy...";
		weapon.bobrangex 1.5;
		weapon.bobrangey 0.5;
		weapon.bobspeed 1.5;
		scale 0.6;
		obituary "%o was shredded by %k.";
        hdweapon.barrelsize 35,1,1;
		hdweapon.refid HDLD_SHREDDER;
		tag "Shredder 4ga Autocannon";
    }

    override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

    override void PostBeginPlay()
    {
        weaponspecial = 1337; // [Ace] UaS sling compatibility.
        Super.PostBeginPlay();
    }

    override double gunmass(){
        return 26+weaponstatus[SHDRS_BOX]*0.18+weaponstatus[SHDRS_MAG]*0.04;
    }

    override double weaponbulk(){
        double blx=418;
		int bxg=weaponstatus[SHDRS_BOX];
		int mgg=weaponstatus[SHDRS_MAG];

        return blx+(mgg<0?0:(ENC_776MAG_LOADED+mgg*ENC_776_LOADED))+(bxg<0?0:(ENC_SHREDDERBOX_EMPTY+bxg*ENC_4GSLOADED));
    }

    override string,double getpickupsprite(){
		return "SDPS"..((weaponstatus[SHDRS_BOX]<0)?"B":"A").."0",1.;
	}
	
	override void ForceBasicAmmo(){
		owner.A_TakeInventory("HD4GSAmmo");
		owner.A_TakeInventory("SevenMilAmmo");
		ForceOneBasicAmmo("HDShredderBox");
		ForceOneBasicAmmo("HD7mMag");
	}

	override void failedpickupunload(){
		failedpickupunloadmag(SHDRS_BOX,"HDShredderBox");
	}

	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("HD4GSAmmo"))owner.A_DropInventory("HD4GSAmmo",amt*50);
			else owner.A_DropInventory("HDShredderBox",amt);

			if(owner.countinv("SevenMilAmmo"))owner.A_DropInventory("SevenMilAmmo",amt*30);
			else owner.A_DropInventory("HD7mMag",amt);
		}
	}

    override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextboxloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HDShredderBox")));
			if(nextboxloaded>=1){
				sb.drawimage("SDRB01",(-52,-7),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.5,0.5));
			}else if(nextboxloaded<1){
				sb.drawimage("SDRB02",(-52,-7),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextboxloaded?0.6:1.,scale:(0.5,0.5));
			}
			sb.drawnum(hpl.countinv("HDShredderBox"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);

			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD7mMag")));
			if(nextmagloaded>=1){
				sb.drawimage("RMAGNORM",(-66,-3),sb.DI_SCREEN_CENTER_BOTTOM);
			}else if(nextmagloaded<1){
				sb.drawimage("RMAGEMPTY",(-66,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.);
			}
			sb.drawnum(hpl.countinv("HD7mMag"),-63,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(hdw.weaponstatus[SHDRS_MAG],30);
		if(hdw.weaponstatus[SHDRS_CHAMBER2]>1){
			sb.drawrect(-25,-12,2,2);
			sb.drawrect(-22,-12,6,2);
		}else if(hdw.weaponstatus[SHDRS_CHAMBER2]>0){
			sb.drawrect(-22,-12,6,2);
		}

		sb.drawwepnum(hdw.weaponstatus[SHDRS_BOX],50,posy:-14);
		if(hdw.weaponstatus[SHDRS_CHAMBER1]>1){
			sb.drawrect(-24,-21,5,3);
			sb.drawrect(-18,-21,2,3);
		}else if(hdw.weaponstatus[SHDRS_CHAMBER1]>0){
			sb.drawrect(-18,-21,2,3);
		}
	}

    override string gethelptext(){
		return
		WEPHELP_FIRE.."  Shoot 4ga gun\n"
		..WEPHELP_ALTFIRE.."  Shoot 7mm gun\n"
		..WEPHELP_RELOAD.."  Reload (4ga gun)\n"
		..WEPHELP_ALTRELOAD.."  Reload (7mm gun)\n"
		..WEPHELP_USE.."+"..WEPHELP_ALTRELOAD.."  Reload chamber (7mm gun only)\n"
		..WEPHELP_UNLOAD.."  Unload (4ga gun)\n"
		..WEPHELP_USE.."+"..WEPHELP_UNLOAD.."  Unload (7mm gun)\n"
		..WEPHELP_MAGMANAGER
		;
    }

	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-8+bob.y,32,20,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.1;
		sb.drawimage(
			"SHDRFRNT",(0,-7)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"SHDRBACK",(0,-12)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
	}

    action void A_ShowBelt(){
		int ammo=invoker.weaponstatus[SHDRS_BOX];
		if(ammo>=5)setweaponstate("belt5",5);
		else if(ammo>=4)setweaponstate("belt4",5);
		else if(ammo>=3)setweaponstate("belt3",5);
		else if(ammo>=2)setweaponstate("belt2",5);
		else if(ammo>=1)setweaponstate("belt1",5);
		else if(ammo>=0)setweaponstate("belt0",5);
		else setweaponstate("beltn",5);
	}

	action void A_ShowBeltMove(){
		int ammo=invoker.weaponstatus[SHDRS_BOX];
		if(ammo>=5)setweaponstate("beltmove5",5);
		else if(ammo>=4)setweaponstate("beltmove4",5);
		else if(ammo>=3)setweaponstate("beltmove3",5);
		else if(ammo>=0)setweaponstate("beltmove0",5);
		else setweaponstate("beltmoven",5);
	}

	action void A_ShootTop(){
		let p=HDBulletActor.FireBullet(self,"HDB_4GS",spread:0.15,speedfactor:0.95);
		A_StartSound("shredder/topshoot",CHAN_WEAPON,CHANF_OVERLAP);
		distantnoise.make(p,"world/shotgunfar");
	}

	action void A_Chamber(bool unloadonly=false){
		A_StartSound("shredder/bottombolt",8,CHANF_OVERLAP);
		actor brsss=null;
		if(invoker.weaponstatus[SHDRS_CHAMBER2]==1){
			brsss=A_EjectCasing(
					"HDSpent7mm",-1.5,
					(frandom(5,5.5),frandom(-3,-3.5),frandom(0,0.2)),
					(5,1.5*-1.5,-3)
				);
			brsss.vel+=vel;
			brsss.A_StartSound(brsss.bouncesound,volume:0.4);
		}else if(invoker.weaponstatus[SHDRS_CHAMBER2]==2){
			double fc=max(pitch*0.01,5);
			double cosp=cos(pitch);
			[cosp,brsss]=A_SpawnItemEx(
				invoker.weaponstatus[0]&SHDRF_RECAST?"HDLoose7mmRecast":"HDLoose7mm",
				cosp*12,0,height-8-sin(pitch)*12,
				cosp*fc,0.2*randompick(-1,1),-sin(pitch)*fc,
				0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			brsss.vel+=vel;
			brsss.A_StartSound(brsss.bouncesound,volume:0.4);
		}
		if(!unloadonly && invoker.weaponstatus[SHDRS_MAG]>0){
			invoker.weaponstatus[SHDRS_CHAMBER2]=2;
			if(HD7mMag.CheckRecast(invoker.weaponstatus[SHDRS_MAG],invoker.weaponstatus[SHDRS_RECASTS])){
				invoker.weaponstatus[0]|=SHDRF_RECAST;
				invoker.weaponstatus[SHDRS_RECASTS]--;
			}
			invoker.weaponstatus[SHDRS_MAG]--;
		}else{
			invoker.weaponstatus[0]&=~SHDRF_RECAST;
			invoker.weaponstatus[SHDRS_CHAMBER2]=0;
			if(brsss!=null)brsss.vel=vel+(cos(angle),sin(angle),-2);
		}
	}

	states{
	select0:
		SHDR A 0 A_Overlay(2,"droop");
		SHDR A 0 A_Overlay(5,"belt");
		SHDR A 0 A_Overlay(6,"topcover");
		goto select0bfg;	
	deselect0:
		SHDR A 0;
		goto deselect0bfg;
	droop:
		TNT1 A 1{
			if(pitch<frandom(14,21)&&(!gunbraced())){
				A_MuzzleClimb(frandom(-0.06,0.06),
					frandom(0.2,clamp(1-pitch,
						hdplayerpawn(self)?0.06/hdplayerpawn(self).strength:0.06
					,0.12))
				);
			}
		}loop;
	ready:
		SHDR A 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
			if(pressinguse()&&pressingunload())setweaponstate("altunload");
			if(pressinguse()&&pressingaltreload())setweaponstate("loadchamberbottom");
		}
		goto readyend;
	user3:
		---- A 0 A_MagManager("HDShredderBox");
		goto ready;
	altfire:
		SHDR A 0 {
			if(invoker.weaponstatus[SHDRS_CHAMBER2]==2)setweaponstate("bottomshoot");
			else if(invoker.weaponstatus[SHDRS_MAG]>0)setweaponstate("chamberbottom");
			else setweaponstate("nope");
		}
	althold:
		SHDR A 1;
		goto nope;
	fire:
		SHDR A 0 {
			if(invoker.weaponstatus[SHDRS_CHAMBER1]==2)setweaponstate("topshoot");
			else if(invoker.weaponstatus[SHDRS_BOX]>0)setweaponstate("chambertop");
			else setweaponstate("nope");
		}
	hold:
		SHDR A 1;
		goto nope;
	topshoot:
		SHDR B 1 offset(0,34) bright{
			A_Light2();
			HDFlashAlpha(-32);
			A_ZoomRecoil(0.8);
			A_AlertMonsters();
			A_ShootTop();

			invoker.weaponstatus[SHDRS_CHAMBER1]=1;

			if(!gunbraced()){
				A_ChangeVelocity(
					cos(pitch)*-frandom(0.33,0.66),0,sin(pitch)*frandom(0.33,0.66),
					CVF_RELATIVE
				);
			}

			A_ChangeVelocity(
				cos(pitch)*-frandom(0.1,0.2),0,sin(pitch)*frandom(0.1,0.2),
				CVF_RELATIVE
			);

			A_MuzzleClimb(-frandom(0.5, 1), -frandom(1, 1.5), -frandom(0.5, 1), -frandom(1, 1.5));
		}
		SHDR A 0 A_Light0();
		SHDR A 1 offset(0,38){
			invoker.weaponstatus[SHDRS_CHAMBER1]=0;
			A_SpawnItemEx("HDSpent4GS",
				cos(pitch)*10,0,height-10-sin(pitch)*10,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
		SHDR A 1{
			if(invoker.weaponstatus[SHDRS_BOX]>0){
				invoker.weaponstatus[SHDRS_CHAMBER1]=2;
				invoker.weaponstatus[SHDRS_BOX]--;
				setweaponstate("beltmove",5);
			}
		}
		SHDR A 1 offset(0,42);
		SHDR A 1 offset(0,44);
		SHDR A 1 offset(0,45);
		SHDR A 1 offset(0,43);
		SHDR A 1 offset(0,39);
		SHDR A 1 offset(0,35);
		SHDR A 1 offset(0,33);
		SHDR A 1 offset(0,32);
		goto readyend;
	bottomshoot:
		SHDR C 1 offset(0,34) bright{
			A_Light1();
			HDFlashAlpha(16);
			A_AlertMonsters();
			HDBulletActor.FireBullet(self,
				invoker.weaponstatus[0]&SHDRF_RECAST?"HDB_776r":"HDB_776"
			);
			A_StartSound("shredder/bottomshoot",CHAN_WEAPON);
			A_MuzzleClimb(-frandom(0.05, 0.1), -frandom(0.1, 0.15), -frandom(0.05, 0.1), -frandom(0.1, 0.15));

			invoker.weaponstatus[SHDRS_CHAMBER2]=1;
			invoker.weaponstatus[0]&=~SHDRF_RECAST;
		}
		SHDR A 0 A_Light0();
		SHDR A 1 A_Chamber();
		SHDR A 1;
		goto readyend;
	chamberbottom:
		SHDR A 1 offset(-1,34){
			if(
				invoker.weaponstatus[SHDRS_CHAMBER2]==2
				||invoker.weaponstatus[SHDRS_MAG]<1
			)setweaponstate("nope");
		}
		SHDR A 1 offset(-2,36)A_Chamber();
		SHDR A 1 offset(-2,38);
		SHDR A 1 offset(-1,34);
		goto nope;
	unloadchamberbottom:
		SHDR A 1 offset(-1,34){
			if(
				invoker.weaponstatus[SHDRS_CHAMBER2]<1
			)setweaponstate("nope");
		}
		SHDR A 1 offset(-2,36)A_Chamber(true);
		SHDR A 1 offset(-2,38);
		SHDR A 1 offset(-1,34);
		goto nope;
	loadchamberbottom:
		SHDR A 0 A_JumpIf(invoker.weaponstatus[SHDRS_CHAMBER2]>0,"nope");
		SHDR A 0 A_JumpIf(
			!countinv("SevenMilAmmo")
			&&!countinv("SevenMilAmmoRecast")
		,"nope");
		SHDR A 1 offset(0,34) A_StartSound("weapons/pocket",9);
		SHDR A 2 offset(2,36);
		SHDR A 8 offset(5,40);
		SHDR A 8 offset(7,44);
		SHDR A 8 offset(6,43);
		SHDR A 10 offset(4,39){
			class<inventory> rndtp="SevenMilAmmo";
			if(!countinv(rndtp))rndtp="SevenMilAmmoRecast";

			if(countinv(rndtp)){
				A_TakeInventory(rndtp,1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[SHDRS_CHAMBER2]=2;

				if(rndtp=="SevenMilAmmoRecast")invoker.weaponstatus[0]|=SHDRF_RECAST;
				else invoker.weaponstatus[0]&=~SHDRF_RECAST;

				A_StartSound("shredder/reloadchamber",8);
			}else A_SetTics(4);
		}
		SHDR A 7 offset(5,37);
		SHDR A 1 offset(2,36);
		SHDR A 1 offset(0,34);
		goto readyend;
	altunload:
		SHDR A 0{
			invoker.weaponstatus[0]|=SHDRF_JUSTUNLOAD;
			if(invoker.weaponstatus[SHDRS_MAG]>=0)setweaponstate("unmag");
			else if(invoker.weaponstatus[SHDRS_CHAMBER2]>0)setweaponstate("unloadchamberbottom");
		}
		goto nope;
	user1:
	altreload:
		SHDR A 0{
			int inmag=invoker.weaponstatus[SHDRS_MAG];
			bool nomags=HDMagAmmo.NothingLoaded(self,"HD7mMag");
			bool haverounds=countinv("SevenMilAmmo")||countinv("SevenMilAmmoRecast");
			invoker.weaponstatus[0]&=~SHDRF_JUSTUNLOAD;

			//no point reloading
			if(
				inmag>=30
				||(
					//no mags to load and can't directly load chamber
					nomags
					&&(
						!haverounds
						||inmag>=0
						||invoker.weaponstatus[SHDRS_CHAMBER2]>0
					)
				)
			)return resolvestate("nope");

			//no mag, empty chamber, have loose rounds
			if(
				inmag<0
				&&invoker.weaponstatus[SHDRS_CHAMBER2]<1
				&&haverounds
				&&(
					pressinguse()
					||nomags
				)
			)return resolvestate("loadchamberbottom");

			if(
				invoker.weaponstatus[SHDRS_MAG]>0  
			){
				//if full mag and unchambered, chamber
				if(
					invoker.weaponstatus[SHDRS_MAG]>=30  
					&&invoker.weaponstatus[SHDRS_CHAMBER2]!=2
				){
					return resolvestate("chamberbottom");
				}				
			}
			return resolvestate("unmag");
		}
	unmag:
		SHDR A 2 offset(0,34);
		SHDR A 2 offset(2,36);
		SHDR A 2 offset(4,40);
		SHDR A 4 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		SHDR A 8 offset(14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound ("shredder/magout",8,CHANF_OVERLAP);
		}
		SHDR A 0{
			int magamt=invoker.weaponstatus[SHDRS_MAG];
			if(magamt<0){setweaponstate("magout");return;}

			if(magamt>0){
				int fullets=clamp(30-invoker.weaponstatus[SHDRS_RECASTS],0,magamt);
				magamt+=fullets*100;
			}

			invoker.weaponstatus[SHDRS_MAG]=-1;
			invoker.weaponstatus[SHDRS_RECASTS]=0;
			if(
				!PressingAltReload()
				&&!PressingUnload()
			){
				HDMagAmmo.SpawnMag(self,"HD7mMag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD7mMag",magamt);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		SHDR A 7 offset(12,52)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		SHDR A 0 A_StartSound("weapons/pocket",9);
		SHDR AA 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		SHDR A 0{
		}goto magout;
	magout:
		SHDR A 4{
			invoker.weaponstatus[SHDRS_MAG]=-1;
			invoker.weaponstatus[SHDRS_RECASTS]=0;
			if(invoker.weaponstatus[0]&SHDRF_JUSTUNLOAD)setweaponstate("reloaddone");
		}goto loadmag;
	loadmag:
		SHDR A 0 A_StartSound("weapons/pocket",9);
		SHDR AA 14 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.4),frandom(-0.2,0.8));
		SHDR A 12 offset(12,52){
			let mmm=hdmagammo(findinventory("HD7mMag"));
			if(mmm){
				int minput=mmm.TakeMag(true);
				int rndcnt=minput%100;
				invoker.weaponstatus[SHDRS_MAG]=rndcnt;
				invoker.weaponstatus[SHDRS_RECASTS]=clamp(30-(minput/100),0,rndcnt);

				A_StartSound("shredder/magin",8,CHANF_OVERLAP);
			}
		}
		SHDR A 4 offset(8,46) A_StartSound("shredder/magtap",8,CHANF_OVERLAP);
		goto reloaddone;

	reloaddone:
		SHDR A 2 offset (4,40);
		SHDR A 2 offset (2,34);
		goto chamberbottom;
	user4:
	unload:
		SHDR A 0{
			invoker.weaponstatus[0]|=SHDRF_JUSTUNLOAD;
			if(invoker.weaponstatus[SHDRS_BOX]>=0)setweaponstate("unbox");
			else if(invoker.weaponstatus[SHDRS_CHAMBER1]>0)setweaponstate("unloadchambertop");
		}
		goto nope;
	reload:
		SHDR A 0{
			int inbox=invoker.weaponstatus[SHDRS_BOX];
			bool noboxes=HDMagAmmo.NothingLoaded(self,"HDShredderBox");
			invoker.weaponstatus[0]&=~SHDRF_JUSTUNLOAD;
			if(inbox>=50||noboxes)setweaponstate("nope");
		}
		goto unbox;
	unbox:
		SHDR DEF 3;
		SHDR G 4;
		SHDR H 4 offset(2,38) A_StartSound("shredder/topboltback",8,CHANF_OVERLAP);
		SHDR I 4 offset(3,40);
		SHDR J 4 offset(1,34) A_StartSound("shredder/topboltforward",8,CHANF_OVERLAP);
		SHDR G 4 offset(0,32);
		SHDR FED 3;
		SHDR A 6;
		SHDR A 3 offset(-1,34);
		SHDR A 3 offset(-3,40);
		SHDR A 3 offset(-6,50);
		SHDR A 3 offset(-8,65);
		SHDR A 3 offset(-10,75);
		SHDR A 3 offset(-11,83);
		SHDR A 0 setweaponstate("opencover",6);
		goto opencoverwait;
    topcover:
		TCVR A 1;
		goto topcover;

	opencover:
		TCVR B 3;
		TCVR C 3;
		TCVR D 4 A_StartSound("shredder/coverup",8);
		TCVR E 4;
		TCVR F 3;
		TCVR G 3;
		TCVR G 6;
		TCVR G 0{
			if(invoker.weaponstatus[SHDRS_BOX]>0)setweaponstate("chaindown",6);
			else if(invoker.weaponstatus[SHDRS_BOX]==0)setweaponstate("removebox",6);
			else if(invoker.weaponstatus[SHDRS_BOX]<0)setweaponstate("boxout",6);
		}
	opencoverwait:
		SHDR A 20 offset(0,0);
		SHDR A 3 offset(-13,88);
		SHDR A 3 offset(-14,92);
		SHDR A 0{
			if(invoker.weaponstatus[SHDRS_BOX]>0)setweaponstate("chaindownwait");
			else if(invoker.weaponstatus[SHDRS_BOX]==0)setweaponstate("removeboxwait");
			else if(invoker.weaponstatus[SHDRS_BOX]<0)setweaponstate("boxout");
		}
	
	chaindown:
		TCVR H 4 A_StartSound("shredder/chaindown",8);
		TCVR I 4;
		TCVR J 4;
		TCVR G 15;
		goto removebox;
	chaindownwait:
		SHDR A 27 offset(0,0);
		goto removeboxwait;

	removebox:
		TCVR G 12 A_StartSound("shredder/boxout",8);
		TCVR K 4;
		TCVR L 4;
		TCVR M 4;
		TCVR N 4;
		TCVR O 4;
		TCVR G 0{
			int boxamt=invoker.weaponstatus[SHDRS_BOX];
			invoker.weaponstatus[SHDRS_BOX]=-1;
			if(!PressingUnload()&&!PressingReload()){
				HDMagAmmo.SpawnMag(self,"HDShredderBox",boxamt);
				setweaponstate("boxout");
			}else{
				HDMagAmmo.GiveMag(self,"HDShredderBox",boxamt);
				setweaponstate("pocket",6);
				setweaponstate("pocketwait");
			}
		}
	removeboxwait:
		SHDR A 3 offset(-16,93);
		SHDR A 3 offset(-17,95);
		SHDR A 3 offset(-16,93);
		SHDR A 3 offset(-14,92);
		SHDR A 20 offset(0,0);
	
	pocket:
		TCVR G 21;
		goto boxout;
	pocketwait:
		SHDR A 7 offset(-16,94)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		SHDR A 0 A_StartSound("weapons/pocket",9);
		SHDR AA 7 offset(-14,92)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		goto boxout;

	boxout:
		SHDR A 0{
			if(invoker.weaponstatus[0]&SHDRF_JUSTUNLOAD){
				setweaponstate("closecover",6);
				setweaponstate("closecoverwait");
			}else{
				setweaponstate("insertbox",6);
				setweaponstate("insertboxwait");
			}
		}

	insertbox:
		TCVR G 12 A_StartSound("weapons/pocket",CHAN_WEAPON);
		TCVR O 4;
		TCVR N 4;
		TCVR M 4;
		TCVR L 4;
		TCVR K 4;
		TCVR G 12{
			A_StartSound("shredder/boxin",8);
			let mmm=hdmagammo(findinventory("HDShredderBox"));
			if(mmm){
				invoker.weaponstatus[SHDRS_BOX]=mmm.TakeMag(true);
			}
		}
		TCVR G 0{
			if(invoker.weaponstatus[SHDRS_BOX]==0){
				setweaponstate("closecover",6);
				setweaponstate("closecoverwait");
			}
		}
		TCVR G 15;
		TCVR J 4 A_StartSound("shredder/chaininsert",8);
		TCVR I 4;
		TCVR H 4;
		TCVR G 3;
		goto closecover;
	insertboxwait:
		SHDR A 32 offset(0,0);
		SHDR A 3 offset(-12,93);
		SHDR A 3 offset(-11,95);
		SHDR A 3 offset(-12,93);
		SHDR A 3 offset(-14,92);
		SHDR A 30;
		goto closecoverwait;
	
	closecover:
		TCVR P 3;
		TCVR Q 3;
		TCVR R 3;
		TCVR S 4;
		TCVR T 4 A_StartSound("shredder/coverdown",8);
		TCVR B 3;
		goto topcover;
	closecoverwait:
		SHDR A 17 offset(0,0);
		SHDR A 3 offset(-11,83);
		SHDR A 3 offset(-8,65);
		SHDR A 3 offset(-6,50);
		SHDR A 3 offset(-4,40);
		SHDR A 3 offset(-2,36);
		SHDR A 3 offset(-1,34);
		SHDR A 3;
		SHDR A 0{
			if(invoker.weaponstatus[SHDRS_CHAMBER1]<2 && invoker.weaponstatus[SHDRS_BOX]>0)setweaponstate("chambertop");
		}
		goto nope;
	
	chambertop:
		SHDR DEF 3;
		SHDR G 4;
		SHDR H 4 offset(2,38) A_StartSound("shredder/topboltback",8,CHANF_OVERLAP);
		SHDR I 8 offset(3,40){
			if(invoker.weaponstatus[SHDRS_CHAMBER1]==1){
				A_SpawnItemEx("HDSpent4GS",
				cos(pitch)*10,0,height-10-sin(pitch)*10,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			invoker.weaponstatus[SHDRS_CHAMBER1]=0;
			}
			if(invoker.weaponstatus[SHDRS_BOX]>0){
				invoker.weaponstatus[SHDRS_CHAMBER1]=2;
				invoker.weaponstatus[SHDRS_BOX]--;
				setweaponstate("beltmove",5);
			}
		}
		SHDR J 4 offset(1,34) A_StartSound("shredder/topboltforward",8,CHANF_OVERLAP);
		SHDR G 4 offset(0,32);
		SHDR FED 3;
		goto nope;
	unloadchambertop:
		SHDR DEF 3;
		SHDR G 4;
		SHDR H 4 offset(2,38) A_StartSound("shredder/topboltback",8,CHANF_OVERLAP);
		SHDR I 8 offset(3,40){
			if(invoker.weaponstatus[SHDRS_CHAMBER1]==2){
				A_SpawnItemEx("HDFumbling4GS",
				cos(pitch)*10,0,height-10-sin(pitch)*10,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			}else if(invoker.weaponstatus[SHDRS_CHAMBER1]==1){
				A_SpawnItemEx("HDSpent4GS",
				cos(pitch)*10,0,height-10-sin(pitch)*10,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			}
			invoker.weaponstatus[SHDRS_CHAMBER1]=0;
		}
		SHDR J 4 offset(1,34) A_StartSound("shredder/topboltforward",8,CHANF_OVERLAP);
		SHDR G 4 offset(0,32);
		SHDR FED 3;
		goto nope;
	belt:
		#### # 1 A_ShowBelt();
		goto belt;

	belt5: BELT A 1; goto belt;
	belt4: BELT B 1; goto belt;
	belt3: BELT C 1; goto belt;
	belt2: BELT D 1; goto belt;
	belt1: BELT E 1; goto belt;
	belt0: BELT I 1; goto belt;
	beltn: TNT1 A 1; goto belt;

	beltmove:
		#### # 1 A_ShowBeltMove();
		goto belt;

	beltmove5: BELT F 2; goto belt;
	beltmove4: BELT G 2; goto belt;
	beltmove3: BELT H 2; goto belt;
	beltmove0: BELT I 2; goto belt;
	beltmoven: TNT1 A 2; goto belt;

	spawn:
        SDPS AB -1 nodelay{
			if(invoker.weaponstatus[SHDRS_BOX]<0)frame=1;
		}
    }

	override void InitializeWepStats(bool idfa){
		weaponstatus[0]=0;
		weaponstatus[SHDRS_BOX]=50;
		weaponstatus[SHDRS_CHAMBER1]=2;
		weaponstatus[SHDRS_MAG]=30;
		weaponstatus[SHDRS_CHAMBER2]=2;
		weaponstatus[SHDRS_RECASTS]=0;
	}
}

class HDShredderBox:HDMagAmmo{
    default{
        //$Category "Ammo/Hideous Destructor/"
		//$Title "Shredder Ammo Box"
		//$Sprite "SBPSA0"

        hdmagammo.maxperunit 50;
        hdmagammo.inserttime 14;
		hdmagammo.extracttime 7;
		hdmagammo.roundtype "HD4GSAmmo";
		hdmagammo.roundbulk ENC_4GSLOADED;
		hdmagammo.magbulk ENC_SHREDDERBOX_EMPTY;
		tag "Shredder Ammo Box";
		inventory.pickupmessage "Picked up a 50-round 'Shredder' box.";
		hdpickup.refid HDLD_SHREDDERBOX;
		scale 0.5;
    }

    override string,string,name,double getmagsprite(int thismagamt){
		string magsprite=(thismagamt>0)?"SDRB01":"SDRB02";
		return magsprite,"4GS1A0","HD4GSAmmo",1.0;
	}

    override void GetItemsThatUseThis(){
		itemsthatusethis.push("HDShredder");
	}

    states{
	spawn:
		SBPS A -1;
		stop;
	spawnempty:
		SBPS B -1{
			brollsprite=true;brollcenter=true;
			roll=randompick(0,0,0,0,2,2,2,2,1,3)*90;
		}stop;
	}
}

enum shredderstatus{
	SHDRF_JUSTUNLOAD=1,
	SHDRF_RECAST=2,

	SHDRS_FLAGS=0,
	SHDRS_BOX=1,
	SHDRS_CHAMBER1=2,
	SHDRS_MAG=3,
	SHDRS_CHAMBER2=4,
	SHDRS_RECASTS=5,
};

class ShredderSpawn:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			let zzz=HDShredder(spawn("HDShredder",pos,ALLOW_REPLACE));
				spawn("HD7mMag",pos+(2,0,0),ALLOW_REPLACE);
				spawn("HD7mBoxPickup",pos+(-2,0,0),ALLOW_REPLACE);
		}stop;
	}
}