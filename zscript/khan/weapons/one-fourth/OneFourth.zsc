// ------------------------------------------------------------
// "One-Fourth" Lever-action 4ga Shotgun w/ Underbarrel 12ga Sawed-off Slayer
// ------------------------------------------------------------

const HDLD_ONEFOURTH="ofh";

class HDOneFourth:HDWeapon{
    bool breechopen;
	default{
        //$Category "Weapons/Hideous Destructor"
		//$Title "One-Fourth"
		//$Sprite "OFPSA0"

        +hdweapon.fitsinbackpack
        weapon.slotnumber 3;
		weapon.slotpriority 10;
		weapon.selectionorder 90;
		inventory.pickupmessage "You got the One-Fourth! What's Harlan Corps?";
		weapon.bobrangex 0.42;
		weapon.bobrangey 0.65;
		weapon.bobspeed 2.0;
		scale 0.6;
		obituary "%o lost 3/4th of their body mass thanks to %k.";
        hdweapon.barrelsize 25,1,2;
		hdweapon.refid HDLD_ONEFOURTH;
		tag "One-Fourth 4ga Shotgun";

		hdweapon.loadoutcodes "
			\cuslug - start with slugs loaded for the underbarrel Slayer";
    }

    override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

    override double gunmass(){
        int tube=weaponstatus[OFTHS_TUBE];
        return 18+tube*0.9;
    }

    override double weaponbulk(){
        return 250+weaponstatus[OFTHS_TUBE]*ENC_4GSLOADED;
    }

    override string,double getpickupsprite(){return "OFPSA0",1.0;}

    override void ForceBasicAmmo(){
		owner.A_SetInventory("HD4GSAmmo",5);
        if(weaponstatus[0]&OFTHF_SLUGLOADOUT)owner.A_SetInventory("HDSlugAmmo",2);
		else owner.A_SetInventory("HDShellAmmo",2);
	}

    override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			owner.A_DropInventory("HD4GSAmmo",amt*5);
            owner.A_DropInventory("HDShellAmmo",amt*2);
            owner.A_DropInventory("HDSlugAmmo",amt*2);
		}
	}

    override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("4GS1A0",(-47,-10),basestatusbar.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HD4GSAmmo"),-46,-8,
				basestatusbar.DI_SCREEN_CENTER_BOTTOM
			);

			sb.drawimage("SHL1A0",(-62,-10),basestatusbar.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HDShellAmmo"),-61,-8,
				basestatusbar.DI_SCREEN_CENTER_BOTTOM
			);

			sb.drawimage("SLG1A0",(-62,-30),basestatusbar.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HDSlugAmmo"),-61,-28,
				basestatusbar.DI_SCREEN_CENTER_BOTTOM
			);
		}
		if(hdw.weaponstatus[0]&OFTHF_SSMODE){
			sb.drawimage("RBRSA3A7",(-40,-6),sb.DI_SCREEN_CENTER_BOTTOM);
		}else sb.drawimage("RBRSA3A7",(-40,-17),sb.DI_SCREEN_CENTER_BOTTOM);
		
		int loffs=-36;int rofs=-23;int yofs=-19;
		if(hdw.weaponstatus[0]&OFTHF_DOUBLE){
			loffs=-32;rofs=-28;yofs=-24;
			sb.drawimage("STBURAUT",(-28,-12),sb.DI_SCREEN_CENTER_BOTTOM);
		}
		
		if(hdw.weaponstatus[OFTHS_CHAMBER]>1){
			sb.drawrect(-24,yofs,5,3);
			sb.drawrect(-18,yofs,2,3);
		}
		else if(hdw.weaponstatus[OFTHS_CHAMBER]>0){
			sb.drawrect(-18,yofs,2,3);
		}
		sb.drawwepnum(hdw.weaponstatus[OFTHS_TUBE],4,posy:yofs+7);
		
		if(hdw.weaponstatus[OFTHS_SSCHAMBER1]>3){
			sb.drawrect(loffs+1,-10,1,5);
			sb.drawrect(loffs,-9,3,4);
			sb.drawrect(loffs,-4,3,2);
		}else if(hdw.weaponstatus[OFTHS_SSCHAMBER1]>2){
			sb.drawrect(loffs,-10,3,5);
			sb.drawrect(loffs,-4,3,2);
		}else if(hdw.weaponstatus[OFTHS_SSCHAMBER1]>0){
			sb.drawrect(loffs,-4,3,2);
		}

		if(hdw.weaponstatus[OFTHS_SSCHAMBER2]>3){
			sb.drawrect(rofs+1,-10,1,5);
			sb.drawrect(rofs,-9,3,4);
			sb.drawrect(rofs,-4,3,2);
		}else if(hdw.weaponstatus[OFTHS_SSCHAMBER2]>2){
			sb.drawrect(rofs,-10,3,5);
			sb.drawrect(rofs,-4,3,2);
		}else if(hdw.weaponstatus[OFTHS_SSCHAMBER2]>0){
			sb.drawrect(rofs,-4,3,2);
		}
	}

    override string gethelptext(){
		bool ssmode=(weaponstatus[0]&OFTHF_SSMODE);
		if(breechopen)return
		WEPHELP_FIRE.."	Close breech\n"
		..WEPHELP_RELOAD.."	Load buckshot\n"
		..WEPHELP_ALTRELOAD.."	Load slug\n"
		..WEPHELP_UNLOAD.."	Dump loaded shells\n"
		;
		if(ssmode)return
		WEPHELP_FIRE.."	Shoot left\n"
		..WEPHELP_ALTFIRE.." Shoot right\n"
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_FIREMODE.."	Hold to force double shot\n"
		..WEPHELP_ALTRELOAD.."/"..WEPHELP_UNLOAD.."	Open breech\n"
		..WEPHELP_USE.."+"..WEPHELP_FIREMODE.."	One-Fourth mode\n"
		;
		return
		WEPHELP_FIRE.."	Shoot\n"
		..WEPHELP_ALTFIRE.."  Cycle lever\n"
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_ALTRELOAD.."	Open breech\n"
		..WEPHELP_UNLOAD.. "	Unload\n"
		..WEPHELP_USE.."+"..WEPHELP_FIREMODE.."	Sawed-off Slayer mode\n"
		;
    }

	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-32+bob.y,32,40,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.1;
		sb.drawimage(
			"OFTHFRNT",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"OFTHBACK",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
	}

	int handshells;
	action void EmptyHand(int amt=-1,bool careful=false){
		if(!amt)return;
		if(amt>0)invoker.handshells=amt;
		while(invoker.handshells>0){
			if(careful&&!A_JumpIfInventory("HD4GSAmmo",0,"null")){
				invoker.handshells--;
				HDF.Give(self,"HD4GSAmmo",1);
 			}else{
				invoker.handshells--;
				A_SpawnItemEx("HDFumbling4GS",
					cos(pitch)*5,1,height-7-sin(pitch)*5,
					cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
					cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
					-sin(pitch)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
	}

	override void DetachFromOwner(){
		if(handshells>0){
			if(owner)owner.A_DropItem("HD4GSAmmo",handshells);
			else A_DropItem("HD4GSAmmo",handshells);
		}
		handshells=0;
		super.detachfromowner();
	}

	action void A_SetAltHold(bool which){
		if(which)invoker.weaponstatus[0]|=OFTHF_ALTHOLDING;
		else invoker.weaponstatus[0]&=~OFTHF_ALTHOLDING;
	}

    action void A_Chamber(bool careful=false){
		int chm=invoker.weaponstatus[OFTHS_CHAMBER];
		invoker.weaponstatus[OFTHS_CHAMBER]=0;
		if(invoker.weaponstatus[OFTHS_TUBE]>0){
			invoker.weaponstatus[OFTHS_CHAMBER]=2;
			invoker.weaponstatus[OFTHS_TUBE]--;
		}
		vector3 cockdir;double cp=cos(pitch);
		if(careful)cockdir=(-cp,cp,-5);
		else cockdir=(0,-cp*5,sin(pitch)*frandom(4,6));
		cockdir.xy=rotatevector(cockdir.xy,angle);
		actor fbs;bool gbg;
		if(chm>1){
			if(careful&&!A_JumpIfInventory("HD4GSAmmo",0,"null")){
				HDF.Give(self,"HD4GSAmmo",1);
			}else{
				[gbg,fbs]=A_SpawnItemEx("HDFumbling4GS",
					cos(pitch)*8,0,height-8-sin(pitch)*8,
					vel.x+cockdir.x,vel.y+cockdir.y,vel.z+cockdir.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}else if(chm>0){	
			cockdir*=frandom(1.,1.3);
			[gbg,fbs]=A_SpawnItemEx("HDSpent4GS",
				cos(pitch)*8,frandom(-0.1,0.1),height-8-sin(pitch)*8,
				vel.x+cockdir.x,vel.y+cockdir.y,vel.z+cockdir.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
	}

    action bool A_LoadTubeFromHand(){
		int hand=invoker.handshells;
		if(
			!hand
			||(
				invoker.weaponstatus[OFTHS_CHAMBER]>0
				&&invoker.weaponstatus[OFTHS_TUBE]>=4
			)
		){
			EmptyHand();
			return false;
		}
		invoker.weaponstatus[OFTHS_TUBE]++;
		invoker.handshells--;
		A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
		return true;
	}

    action bool A_GrabShells(int maxhand=1,bool settics=false,bool alwaysone=false){
		if(maxhand>0)EmptyHand();else maxhand=abs(maxhand);
		int toload=min(
			countinv("HD4GSAmmo"),
			1,
			max(1,health/22),
			maxhand
		);
		if(toload<1)return false;
		invoker.handshells=toload;
		A_TakeInventory("HD4GSAmmo",toload,TIF_NOTAKEINFINITE);
		if(settics)A_SetTics(7);
		A_StartSound("weapons/pocket",9);
		A_MuzzleClimb(
			frandom(0.1,0.15),frandom(0.2,0.4),
			frandom(0.2,0.25),frandom(0.3,0.4),
			frandom(0.1,0.35),frandom(0.3,0.4),
			frandom(0.1,0.15),frandom(0.2,0.4)
		);
		return true;
	}

	action void A_FireOneFourth(){
		HDBulletActor.FireBullet(self,"HDB_4GS");
		A_StartSound("weapons/onefourthshot",CHAN_WEAPON);

		if(!gunbraced()){
			A_ChangeVelocity(
					cos(pitch)*-frandom(0.75,1.5),0,sin(pitch)*frandom(0.75,1.5),
					CVF_RELATIVE
			);
		}
		
		A_ChangeVelocity(
					cos(pitch)*-frandom(0.25,0.5),0,sin(pitch)*frandom(0.25,0.5),
					CVF_RELATIVE
		);
		A_MuzzleClimb(-frandom(8, 12), -frandom(10, 15), -frandom(8, 12), -frandom(10, 15));
		invoker.weaponstatus[OFTHS_CHAMBER]=1;
	}
	
	double shotpower;
	static double getshotpower(){return frandom(0.9,1.05);}

	static void FireShell(actor caller,bool right){
		double shotpower=getshotpower();
		double spread=7.5;
		double speedfactor=1.05714;

		spread=8.5-0.5*2;
		speedfactor=1.+0.02857*2;

		spread*=shotpower;
		speedfactor*=shotpower;
		vector2 barreladjust=(0.8,-0.05);
		if(right)barreladjust=-barreladjust;
		HDBulletActor.FireBullet(caller,"HDB_wad",xyofs:barreladjust.x,aimoffx:barreladjust.y);
		let p=HDBulletActor.FireBullet(caller,"HDB_00",xyofs:barreladjust.x,
			spread:spread,aimoffx:barreladjust.y,speedfactor:speedfactor,amount:10
		);
		distantnoise.make(p,"world/shotgunfar");
	}

	static void FireSlug(actor caller,bool right){
		double shotpower=getshotpower();
		double spread=4.;
		double speedfactor=1.05714;

		spread=4.;
		speedfactor=1.+0.02857*2;

		spread*=shotpower;
		speedfactor*=shotpower;
		vector2 barreladjust=(0.8,-0.05);
		if(right)barreladjust=-barreladjust;
		HDBulletActor.FireBullet(caller,"HDB_wad",xyofs:barreladjust.x,aimoffx:barreladjust.y);
		let p=HDBulletActor.FireBullet(caller,"HDB_Slug",xyofs:barreladjust.x,
			spread:spread,aimoffx:barreladjust.y,speedfactor:speedfactor
		);
		distantnoise.make(p,"world/shotgunfar");
	}

	action void A_OpenBreech(){
		A_StartSound("weapons/sshoto",8);
		invoker.breechopen=true;
		A_SetHelpText();
	}

	action void A_CloseBreech(){
		A_StartSound("weapons/sshotc",8);
		invoker.breechopen=false;
		A_SetHelpText();
	}

	action void A_LoadRound(){
		bool useslug=(
			justpressed(BT_ALTRELOAD)&&countinv("HDSlugAmmo")
			||!countinv("HDShellAmmo")&&countinv("HDSlugAmmo")
		);
		if(justpressed(BT_RELOAD)&&countinv("HDShellAmmo")||!countinv("HDSlugAmmo")&&countinv("HDShellAmmo"))useslug=false;
		class<inventory>ammotype=useslug?"HDSlugAmmo":"HDShellAmmo";
		A_TakeInventory(ammotype,1,TIF_NOTAKEINFINITE);
		if(invoker.weaponstatus[OFTHS_SSCHAMBER1]==0)invoker.weaponstatus[OFTHS_SSCHAMBER1]=useslug?4:3;
		else if(invoker.weaponstatus[OFTHS_SSCHAMBER1]>0&&invoker.weaponstatus[OFTHS_SSCHAMBER2]==0)invoker.weaponstatus[OFTHS_SSCHAMBER2]=useslug?4:3;
		else return;
		A_StartSound("weapons/sshotl",8,CHANF_OVERLAP);
	}

	action void A_Dump(){
		for(int i=OFTHS_SSCHAMBER1;i<=OFTHS_SSCHAMBER2;i++){
			int thischamber=invoker.weaponstatus[i];
			if(thischamber<1)continue;
			if(thischamber>2){
				class<inventory>ammotype=
				thischamber==4?
				"HDSlugAmmo":"HDShellAmmo";
				A_GiveInventory(ammotype,1);
				invoker.weaponstatus[i]=0;
			}
		}
		A_StartSound("weapons/pocket",9);
		A_ClearOverlays(3,4);
	}

	int cooldown;
	action void A_ReadyOpen(){
		A_WeaponReady(WRF_NOFIRE|WRF_ALLOWUSER3);
		if(justpressed(BT_RELOAD)||justpressed(BT_ALTRELOAD)){
			if(
				(
					invoker.weaponstatus[OFTHS_SSCHAMBER1]>0
					&&invoker.weaponstatus[OFTHS_SSCHAMBER2]>0
				)||(
					!countinv("HDShellAmmo")
					&&!countinv("HDSlugAmmo")
				)
			)setweaponstate("closebreech");
			else if(!invoker.cooldown){
				setweaponstate("loadbreech");
				invoker.cooldown=14;
			}
		}else if(justpressed(BT_ATTACK))setweaponstate("closebreech");
		else if(justpressed(BT_UNLOAD)){
			setweaponstate("dumpbreech");
		}
		if(invoker.cooldown>0)invoker.cooldown--;
	}

	transient cvar swapbarrels;
	states{
	select0:
		OFTH A 0 A_Overlay(2,"droop");
		OFTH A 0{
			invoker.breechopen=false;
			invoker.weaponstatus[0]&=~OFTHF_SSMODE;
			invoker.swapbarrels=cvar.getcvar("hd_swapbarrels",player);
			A_SetHelpText();
		}
		goto select0big;
	deselect0:
		OFTH A 0 A_JumpIf(!invoker.breechopen,"deselect0big");
		OFTH K 1;
		TNT1 A 0 A_ClearOverlays(3,4);
		OFTH H 4 A_CloseBreech();
		OFTH A 5;
		OFTH A 0;
		goto deselect0big;
	droop:
		TNT1 A 1{
			if(pitch<frandom(8,11)&&(!gunbraced())){
				A_MuzzleClimb(frandom(-0.06,0.06),
					frandom(0.15,clamp(1-pitch,
						hdplayerpawn(self)?0.06/hdplayerpawn(self).strength:0.06
					,0.12))
				);
			}
		}loop;
	ready:
		OFTH A 0 A_JumpIf(invoker.breechopen,"readyopen");
		OFTH A 0{
			if(pressinguse()&&pressingfiremode())setweaponstate("switchmode");
		}
		OFTH A 0 A_JumpIf(invoker.weaponstatus[OFTHS_FLAGS]&OFTHF_SSMODE,4);
		OFTH A 0 A_JumpIf(pressingaltfire(),2);
		OFTH A 0{
			if(!pressingaltfire()){
				if(!pressingfire())A_ClearRefire();
				A_SetAltHold(false);
			}
		}
		OFTH A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
		OFTH A 1{
			if(pressingfiremode())invoker.weaponstatus[0]|=OFTHF_DOUBLE;
			else invoker.weaponstatus[0]&=~OFTHF_DOUBLE;

			int pff;
			if(invoker.swapbarrels&&invoker.swapbarrels.getbool()){
				pff=PressingAltfire();
				if(PressingFire())pff|=2;
			}else{
				pff=PressingFire();
				if(PressingAltfire())pff|=2;
			}

			bool ch1=invoker.weaponstatus[OFTHS_SSCHAMBER1]>2;
			bool ch2=invoker.weaponstatus[OFTHS_SSCHAMBER2]>2;

			bool dbl=invoker.weaponstatus[0]&OFTHF_DOUBLE;
			if(ch1&&ch2){
				if(pff==3){
					setweaponstate("shootboth");
					return;
				}
				else if(pff&&dbl){
					setweaponstate("double");
					return;
				}
			}else if(pff&&dbl){
				if(ch1)setweaponstate("shootleft");
				if(ch2)setweaponstate("shootright");
			}
			if(ch1&&pff%2)setweaponstate("shootleft");
			else if(ch2&&pff>1)setweaponstate("shootright");
			else A_WeaponReady((WRF_ALL|WRF_NOFIRE)&~WRF_ALLOWUSER2);			
		}
		OFTH A 0 A_WeaponReady();
		goto readyend;
	hold:
		OFTH A 0{
			bool paf=pressingaltfire();
			if(
				paf&&!(invoker.weaponstatus[0]&OFTHF_ALTHOLDING)
			)setweaponstate("chamber");
			else if(!paf)invoker.weaponstatus[0]&=~OFTHF_ALTHOLDING;
		}
		OFTH A 1 A_WeaponReady(WRF_NONE);
		OFTH A 0 A_Refire();
		goto ready;
	fire:
		OFTH A 0{
			if(invoker.weaponstatus[OFTHS_FLAGS]&OFTHF_SSMODE)setweaponstate("nope");
		}
		OFTH A 0 A_JumpIf(invoker.weaponstatus[OFTHS_CHAMBER]==2,"shoot");
		OFTH A 1 A_WeaponReady(WRF_NONE);
		OFTH A 0 A_Refire();
		goto ready;
	shoot:
		OFTH A 1;
		OFTH B 1 offset(0,40) bright{
			A_FireOneFourth();
			A_Light2();
			HDFlashAlpha(-32);
			A_ZoomRecoil(0.8);
			A_AlertMonsters();
		}
		OFTH A 0 A_Light0();
		OFTH A 1;
		goto ready;
	altfire:
		OFTH A 0{
			if(invoker.weaponstatus[OFTHS_FLAGS]&OFTHF_SSMODE)setweaponstate("nope");
		}
	chamber:
		OFTH A 0 A_JumpIf(invoker.weaponstatus[0]&OFTHF_ALTHOLDING,"nope");
		OFTH A 0 A_SetAltHold(true);
		OFTH A 1 A_Overlay(120,"playsgco");
		OFTH AF 1 A_MuzzleClimb(0,-frandom(0.6,1.));
		OFTH F 1 A_JumpIf(pressingaltfire(),"longstroke");
		OFTH FA 1 A_MuzzleClimb(0,frandom(0.6,1.));
		OFTH F 0;
		OFTH F 0 A_Refire("ready");
		goto ready;
	longstroke:
		OFTH G 2 A_MuzzleClimb(frandom(1.,2.));
		OFTH G 0{
			A_Chamber();
			A_MuzzleClimb(-frandom(1.,2.));
		}
	racked:
		OFTH G 1 A_WeaponReady(WRF_NOFIRE);
		OFTH G 0 A_JumpIf(!pressingaltfire(),"unrack");
		OFTH G 0 A_JumpIf(pressingunload(),"rackunload");
		OFTH G 0 A_JumpIf(invoker.weaponstatus[OFTHS_CHAMBER],"racked");
		OFTH G 0{
			if(pressingreload()){
				if(countinv("HD4GSAmmo"))setweaponstate("rackreload");
			}
		}
		loop;
	rackreload:
		OFTH G 1 offset(-1,35) A_WeaponBusy(true);
		OFTH G 2 offset(-2,37);
		OFTH G 4 offset(-3,40);
		OFTH G 1 offset(-4,42) A_GrabShells(1,true,true);
	rackloadone:
		OFTH G 1 offset(-4,42);
		OFTH G 2 offset(-4,41);
		OFTH G 3 offset(-4,40){
			A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
			invoker.weaponstatus[OFTHS_CHAMBER]=2;
			invoker.handshells--;
			EmptyHand(careful:true);
		}
		OFTH G 5 offset(-4,41);
		OFTH G 4 offset(-4,40) A_JumpIf(invoker.handshells>0,"rackloadone");
		goto rackreloadend;
	rackreloadend:
		OFTH G 1 offset(-3,39);
		OFTH G 1 offset(-2,37);
		OFTH G 1 offset(-1,34);
		OFTH G 0 A_WeaponBusy(false);
		goto racked;
	
	rackunload:
		OFTH G 1 offset(-1,35) A_WeaponBusy(true);
		OFTH G 2 offset(-2,37);
		OFTH G 4 offset(-3,40);
		OFTH G 1 offset(-4,42);
		OFTH G 2 offset(-4,41);
		OFTH G 3 offset(-4,40){
			int chm=invoker.weaponstatus[OFTHS_CHAMBER];
			invoker.weaponstatus[OFTHS_CHAMBER]=0;
			if(chm==2){
				invoker.handshells++;
				EmptyHand(careful:true);
			}else if(chm==1)A_SpawnItemEx("HDSpent4GS",
				cos(pitch)*8,0,height-7-sin(pitch)*8,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			if(chm)A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
		}
		OFTH G 5 offset(-4,41);
		OFTH G 4 offset(-4,40) A_JumpIf(invoker.handshells>0,"rackloadone");
		goto rackreloadend;

	unrack:
		OFTH G 0 A_Overlay(120,"playsgco2");
		OFTH F 1 A_JumpIf(!pressingfire(),1);
		OFTH FA 2{
			if(pressingfire())A_SetTics(1);
			A_MuzzleClimb(0,frandom(0.6,1.));
		}
		OFTH A 0 A_ClearRefire();
		goto ready;
	playsgco:
		TNT1 A 8 A_StartSound("weapons/onefourthforward",8);
		TNT1 A 0 A_StopSound(8);
		stop;
	playsgco2:
		TNT1 A 8 A_StartSound("weapons/onefourthbackward",8);
		TNT1 A 0 A_StopSound(8);
		stop;
	reload:
	startreload:
		OFTH A 1{
			if(invoker.weaponstatus[OFTHS_TUBE]>=4||!countinv("HD4GSAmmo"))setweaponstate("nope");
		}
		OFTH AH 6 A_MuzzleClimb(frandom(.6,.7),-frandom(.6,.7));
	reloadstarthand:
		OFTH I 1 offset(0,36);
		OFTH I 1 offset(0,38);
		OFTH I 2 offset(0,36);
		OFTH I 2 offset(0,34);
		OFTH I 3 offset(0,36);
		OFTH I 3 offset(0,40);
	reloadfast:
		OFTH I 4 offset(0,40) A_GrabShells(1,false);
		OFTH I 3 offset(0,42) A_StartSound("weapons/pocket",9,volume:0.4);
		OFTH I 3 offset(0,41);
		goto reloadashell;
	reloadashell:
		OFTH I 2 offset(0,36);
		OFTH I 4 offset(0,34)A_LoadTubeFromHand();
		OFTH IIIIII 1 offset(0,33){
			if(
				PressingReload()
				||PressingAltReload()
				||PressingUnload()
				||PressingFire()
				||PressingAltfire()
				||PressingZoom()
				||PressingFiremode()
			)invoker.weaponstatus[0]|=OFTHF_HOLDING;
			else invoker.weaponstatus[0]&=~OFTHF_HOLDING;

			if(
				invoker.weaponstatus[OFTHS_TUBE]>=4
				||(
					invoker.handshells<1
					&&
					!countinv("HD4GSAmmo")
				)
			)setweaponstate("reloadend");
			else if(
				!pressingaltreload()
				&&!pressingreload()
			)setweaponstate("reloadend");
			else if(invoker.handshells<1)setweaponstate("reloadstarthand");
		}goto reloadashell;
	reloadend:
		OFTH I 4 offset(0,34) A_StartSound("weapons/huntopen",8);
		OFTH I 1 offset(0,36) EmptyHand(careful:true);
		OFTH I 1 offset(0,34);
		OFTH IHA 5;
		OFTH A 0 A_JumpIf(invoker.weaponstatus[0]&OFTHF_HOLDING,"nope");
		goto ready;

	altreload:
		OFTH A 0;
		goto openbreech;
	unload:
		OFTH A 0 A_JumpIf(invoker.weaponstatus[OFTHS_FLAGS]&OFTHF_SSMODE,"openbreech");
		OFTH A 1{
			if(
				invoker.weaponstatus[OFTHS_CHAMBER]<1
				&&invoker.weaponstatus[OFTHS_TUBE]<1
			)setweaponstate("nope");
		}
		OFTH HI 6 A_MuzzleClimb(frandom(1.2,2.4),-frandom(1.2,2.4));
		OFTH I 1 offset(0,34);
		OFTH I 1 offset(0,36) A_StartSound("weapons/huntopen",8);
		OFTH I 1 offset(0,38);
		OFTH I 4 offset(0,36){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			if(invoker.weaponstatus[OFTHS_CHAMBER]<1){
				setweaponstate("unloadtube");
			}else A_StartSound("weapons/onefourthfull",8,CHANF_OVERLAP);
		}
		OFTH J 8 offset(0,50){
			A_MuzzleClimb(-frandom(1.2,2.4),-frandom(1.2,2.4));
			int chm=invoker.weaponstatus[OFTHS_CHAMBER];
			invoker.weaponstatus[OFTHS_CHAMBER]=0;
			if(chm>1){
				A_StartSound("weapons/huntreload",8);
				if(A_JumpIfInventory("HD4GSAmmo",0,"null"))A_SpawnItemEx("HDFumbling4GS",
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*5,
					vel.y+cos(pitch)*sin(angle-random(86,90))*5,
					vel.z+sin(pitch)*random(4,6),
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);else{
					HDF.Give(self,"HD4GSAmmo",1);
					A_StartSound("weapons/pocket",9);
					A_SetTics(5);
				}
			}else if(chm>0)A_SpawnItemEx("HDSpent4GS",
				cos(pitch)*8,0,height-7-sin(pitch)*8,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
		OFTH I 0 A_JumpIf(!pressingunload(),"reloadend");
		OFTH I 4 offset(0,40);
	unloadtube:
		OFTH I 6 offset(0,40) EmptyHand(careful:true);
	unloadloop:
		OFTH I 8 offset(1,41){
			if(invoker.weaponstatus[OFTHS_TUBE]<1)setweaponstate("reloadend");
			else if(invoker.handshells>=2)setweaponstate("unloadloopend");
			else{
				invoker.handshells++;
				invoker.weaponstatus[OFTHS_TUBE]--;
			}
		}
		OFTH I 4 offset(0,40) A_StartSound("weapons/huntreload",8);
		loop;
	unloadloopend:
		OFTH I 6 offset(1,41);
		OFTH I 3 offset(1,42){
			int rmm=HDPickup.MaxGive(self,"HD4GSAmmo",ENC_4GS);
			if(rmm>0){
				A_StartSound("weapons/pocket",9);
				A_SetTics(8);
				HDF.Give(self,"HD4GSAmmo",min(rmm,invoker.handshells));
				invoker.handshells=max(invoker.handshells-rmm,0);
			}
		}
		OFTH I 0 EmptyHand(careful:true);
		OFTH I 6 A_Jumpif(!pressingunload(),"reloadend");
		goto unloadloop;
	
	switchmode:
		OFTH A 1 offset(0,34){
			invoker.weaponstatus[0]^=OFTHF_SSMODE;
			A_SetHelpText();
		}goto nope;
	shootleft:
		OFTH C 1 bright{
			A_Light2();
			HDFlashAlpha(-16);
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_AlertMonsters();
			
			if(invoker.weaponstatus[OFTHS_SSCHAMBER1]==4){
				invoker.weaponstatus[OFTHS_SSCHAMBER1]-=2;
				invoker.FireSlug(self,0);
			}else if(invoker.weaponstatus[OFTHS_SSCHAMBER1]==3){
				invoker.weaponstatus[OFTHS_SSCHAMBER1]-=2;
				invoker.FireShell(self,0);
			}

			double shotpower=getshotpower();
			A_MuzzleClimb(0.4*shotpower,-0.8*shotpower,0.4*shotpower,-0.8*shotpower);
		}
		OFTH A 0 A_Light0();
		OFTH A 1;
		goto ready;
	shootright:
		OFTH D 1 bright{
			A_Light2();
			HDFlashAlpha(-16);
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_AlertMonsters();
			
			if(invoker.weaponstatus[OFTHS_SSCHAMBER2]==4){
				invoker.weaponstatus[OFTHS_SSCHAMBER2]-=2;
				invoker.FireSlug(self,1);
			}else if(invoker.weaponstatus[OFTHS_SSCHAMBER2]==3){
				invoker.weaponstatus[OFTHS_SSCHAMBER2]-=2;
				invoker.FireShell(self,1);
			}
			
			double shotpower=getshotpower();
			A_MuzzleClimb(-0.4*shotpower,-0.8*shotpower,-0.4*shotpower,-0.8*shotpower);
		}
		OFTH A 0 A_Light0();
		OFTH A 1;
		goto ready;
	double:
		OFTH A 1 offset(0,34);
		OFTH A 1 offset(0,33);
		goto shootboth;
	shootboth:
		OFTH E 1 bright{
			A_Light2();
			HDFlashAlpha(-32);
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("weapons/slayersingle",CHAN_WEAPON,CHANF_OVERLAP);
			A_ZoomRecoil(0.9);
			A_AlertMonsters();
			
			if(invoker.weaponstatus[OFTHS_SSCHAMBER1]==4){
				invoker.weaponstatus[OFTHS_SSCHAMBER1]-=2;
				invoker.FireSlug(self,0);
			}else if(invoker.weaponstatus[OFTHS_SSCHAMBER1]==3){
				invoker.weaponstatus[OFTHS_SSCHAMBER1]-=2;
				invoker.FireShell(self,0);
			}

			if(invoker.weaponstatus[OFTHS_SSCHAMBER2]==4){
				invoker.weaponstatus[OFTHS_SSCHAMBER2]-=2;
				invoker.FireSlug(self,1);
			}else if(invoker.weaponstatus[OFTHS_SSCHAMBER2]==3){
				invoker.weaponstatus[OFTHS_SSCHAMBER2]-=2;
				invoker.FireShell(self,1);
			}
			
			double shotpower=getshotpower();
			double mlt=(invoker.bplayingid?0.3:-0.3)*shotpower;
			double mlt2=-1.5*shotpower;
			A_MuzzleClimb(mlt,mlt2,mlt,mlt2);
		}
		OFTH A 0 A_Light0();
		OFTH A 1;
		goto ready;
	openbreech:
		OFTH AH 6 A_MuzzleClimb(frandom(.6,.7),-frandom(.6,.7));
		OFTH K 1{
			A_OpenBreech();

			for(int i=0;i<2;i++){
				int chm=invoker.weaponstatus[OFTHS_SSCHAMBER1+i];
				if(chm==4){
					A_SpawnItemEx("HDUnspentSlug",
						cos(pitch)*5,0,height-8-sin(pitch)*5,
						vel.x,vel.y,vel.z-1,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else if(chm==3){
					A_SpawnItemEx("HDUnspentShell",
						cos(pitch)*5,0,height-8-sin(pitch)*5,
						vel.x,vel.y,vel.z-1,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else if(chm==2){
					A_SpawnItemEx("HDSpentSlug",
						cos(pitch)*5,0,height-8-sin(pitch)*5,
						vel.x,vel.y,vel.z-1,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else if(chm==1){
					A_SpawnItemEx("HDSpentShell",
						cos(pitch)*5,0,height-8-sin(pitch)*5,
						vel.x,vel.y,vel.z-1,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}
				invoker.weaponstatus[OFTHS_SSCHAMBER1+i]=0;
			}
		}
		goto readyopen;
	readyopen:
		OFTH K 1{
			A_ReadyOpen();
			if(invoker.weaponstatus[OFTHS_SSCHAMBER1]==4)A_Overlay(3,"slug1");
			else if(invoker.weaponstatus[OFTHS_SSCHAMBER1]==3)A_Overlay(3,"shell1");

			if(invoker.weaponstatus[OFTHS_SSCHAMBER2]==4)A_Overlay(4,"slug2");
			else if(invoker.weaponstatus[OFTHS_SSCHAMBER2]==3)A_Overlay(4,"shell2");
		}
		goto readyend;
	closebreech:
		OFTH K 1;
		TNT1 A 0 A_ClearOverlays(3,4);
		OFTH H 4 A_CloseBreech();
		OFTH A 5;
		goto nope;
	loadbreech:
		OFTH K 1 offset(0,34) A_LoadRound();
		goto readyopen;
	dumpbreech:
		OFTH K 1 offset(0,34);
		OFTH K 1 offset(0,38);
		OFTH K 1 offset(0,44);
		OFTH K 1 offset(0,52);
		OFTH K 1 offset(0,62);
		OFTH K 1 offset(0,74);
		OFTH K 1 offset(0,88);
		OFTH K 1 offset(0,104);
		TNT1 A 6 A_Dump();
		OFTH K 1 offset(0,104);
		OFTH K 1 offset(0,88);
		OFTH K 1 offset(0,74);
		OFTH K 1 offset(0,62);
		OFTH K 1 offset(0,52);
		OFTH K 1 offset(0,44);
		OFTH K 1 offset(0,38);
		OFTH K 1 offset(0,34);
		goto readyopen;
	shell1:
		UBSS A 1;
		wait;
	shell2:
		UBSS B 1;
		wait;
	slug1:
		UBSS C 1;
		wait;
	slug2:
		UBSS D 1;
		wait;
	spawn:
		OFPS A -1;
	}

	override void InitializeWepStats(bool idfa){
		weaponstatus[OFTHS_CHAMBER]=2;
		weaponstatus[OFTHS_TUBE]=4;
		if(weaponstatus[0]&OFTHF_SLUGLOADOUT){
			weaponstatus[OFTHS_SSCHAMBER1]=4;
			weaponstatus[OFTHS_SSCHAMBER2]=4;
		}else{
			weaponstatus[OFTHS_SSCHAMBER1]=3;
			weaponstatus[OFTHS_SSCHAMBER2]=3;
		}
		handshells=0;
	}
	
	override void loadoutconfigure(string input){
		int slug=getloadoutvar(input,"slug",1);
		if(slug>=0){
			weaponstatus[0]|=OFTHF_SLUGLOADOUT;
			weaponstatus[OFTHS_SSCHAMBER1]=4;
			weaponstatus[OFTHS_SSCHAMBER2]=4;
		}
	}
}

enum onefourthstatus{
	OFTHF_UNLOADONLY=1,
	OFTHF_ALTHOLDING=2,
	OFTHF_HOLDING=4,
	OFTHF_DOUBLE=8,
	OFTHF_SSMODE=16,
	OFTHF_SLUGLOADOUT=32,

	OFTHS_FLAGS=0,
	OFTHS_CHAMBER=1,
	OFTHS_TUBE=2,
	OFTHS_HAND=3,
	OFTHS_SSCHAMBER1=4,
	OFTHS_SSCHAMBER2=5,
};

class OneFourthSpawn:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			let zzz=HDOneFourth(spawn("HDOneFourth",pos,ALLOW_REPLACE));
			if(!zzz)return;
			HDF.TransferSpecials(self,zzz);
			if(!random(0,4)){
				zzz.weaponstatus[OFTHS_SSCHAMBER1]=4;
				zzz.weaponstatus[OFTHS_SSCHAMBER2]=4;
			}

			if(zzz.weaponstatus[OFTHS_SSCHAMBER1]==4
			&&
			zzz.weaponstatus[OFTHS_SSCHAMBER2]==4){
				spawn("SlugPickup",pos+(2,0,0),ALLOW_REPLACE);
				spawn("SlugPickup",pos+(5,0,0),ALLOW_REPLACE);
				spawn("ShellPickup",pos-(3,0,0),ALLOW_REPLACE);
				spawn("HD4GSAmmo",pos-(6,0,0),ALLOW_REPLACE);
			}
			else{
				spawn("ShellPickup",pos+(2,0,0),ALLOW_REPLACE);
				spawn("ShellPickup",pos+(5,0,0),ALLOW_REPLACE);
				spawn("SlugPickup",pos-(3,0,0),ALLOW_REPLACE);
				spawn("HD4GSAmmo",pos-(6,0,0),ALLOW_REPLACE);
			}
		}stop;
	}
}